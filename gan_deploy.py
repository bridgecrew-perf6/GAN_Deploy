# -*- coding: utf-8 -*-
"""GAN deploy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tP_ZPuKY_UElz7aNk95wT2KjtGhxjK6P
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np

class Load_model():
    def __init__(self, mask_model, face_model, mask_checkpoint_dir, face_checkpoint_dir):
        self.mask_model = mask_model
        self.face_model = face_model
        self.mask_model.build(input_shape=(None, 128, 128, 3))
        self.face_model.build(input_shape=[(None, 128, 128, 3), (None, 128, 128, 1)])  
        
        self.mask_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
        self.face_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
        
        self.mask_checkpoint_dir = mask_checkpoint_dir
        self.face_checkpoint_dir = face_checkpoint_dir

        self.mask_checkpoint = tf.train.Checkpoint(generator_optimizer=self.mask_optimizer,
                                            generator=self.mask_model)        
        self.face_checkpoint = tf.train.Checkpoint(generator_optimizer=self.face_optimizer,
                                            generator=self.face_model)
        
    def load(self):
        self.mask_checkpoint.restore(tf.train.latest_checkpoint(self.mask_checkpoint_dir))
        self.face_checkpoint.restore(tf.train.latest_checkpoint(self.face_checkpoint_dir))
    
    def one_predict(self, img_dir):        
        img = plt.imread(img_dir)
        if img_dir.endswith('.png'):
            img = img * 255.0
        img = tf.keras.preprocessing.image.img_to_array(img)
        img = tf.image.resize(img, [128, 128],
                            method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)
        img = tf.reshape(img, [1, 128, 128, 3])
        img = tf.cast(img, tf.float32)
        img =  (img / 127.5) - 1
        
        mask = self.mask_model(img, training=False)
        mask = noise_processing(mask)
        face = self.face_model([img, mask], training=False)

        plt.figure(figsize=(7,7))
        plt.subplot(1, 2, 1)
        plt.title('Image with mask')
        plt.imshow(img[0] * 0.5 + 0.5)
        plt.axis('off')
        
        plt.subplot(1, 2, 2)
        plt.title('Prediction Image')
        plt.imshow(face[0] * 0.5 + 0.5)
        plt.axis('off')
        plt.show()
        
    # def multiple_predict(self, img_dir):     
    #     testset = Dataset(file_path=img_dir, batch_size=1)
    #     testset = testset.make_test()
    #     img_num = len(testset)
        
    #     plt.figure(figsize=(10, 10))
    #     plt.suptitle('Prediction Image', fontsize=20, y=0.7)
        
    #     for i, img in enumerate(testset):
    #         mask = self.mask_model(img, training=False)
    #         process_img = noise_processing(img, mask)
    #         pred = self.face_model(process_img, training=False)
    #         pred = tf.concat([img, pred], axis=1)

    #         plt.subplot(1, img_num, i+1)
    #         plt.imshow(pred[0] * 0.5 + 0.5)
    #         plt.axis('off') 
    #     plt.show()

mask_g = "/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/GAN-based-face-mask-removal-version2-forked/Trained Model/MaskG"
face_g = "/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/GAN-based-face-mask-removal-version2-forked/Trained Model/FaceG"
face_D_region = "/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/GAN-based-face-mask-removal-version2-forked/Trained Model/face_D_region"
face_D_whole = "/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/GAN-based-face-mask-removal-version2-forked/Trained Model/face_D_whole"

class VGG19_model():
  def __init__(self):
    selected_layers = ["block3_conv4", "block4_conv4", "block5_conv4"]
    self.vgg = tf.keras.applications.VGG19(include_top=False, weights='imagenet', input_shape=(128, 128, 3))
    self.vgg.trainable = False
    self.outputs = [self.vgg.get_layer(l).output for l in selected_layers]

  def get_vgg19(self):
    vgg_model = tf.keras.Model(self.vgg.input, self.outputs)
    return vgg_model

mask_g_model = keras.models.load_model(mask_g)
face_g_model= keras.models.load_model(face_g)
face_D_whole_model= keras.models.load_model(face_D_whole)
face_D_region_model= keras.models.load_model(face_D_region)
vgg_model = VGG19_model()

mask_checkpoint_dir = "/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/Dataset/Checkpoints/mask32_checkpoints"
face_checkpoint_dir ="/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/Dataset/Checkpoints/face_checkpoints"
dis_checkpoint_dir = "/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/Dataset/Checkpoints/dis_checkpoints"

def noise_processing(generate_image):

    generate_image = generate_image.numpy()
    batch, height, width  = generate_image.shape[0], generate_image.shape[1], generate_image.shape[2]
    generate_image = generate_image[:, :, :, 0]
    k = cv2.getStructuringElement(cv2.MORPH_RECT, (1,1))
    for i in range(batch):
        generate_image[i]= cv2.erode(generate_image[i], k)        
        generate_image[i] = cv2.dilate(generate_image[i], k)
    generate_image = np.where(generate_image >= -0.9, 1, -1)
    generate_image = tf.convert_to_tensor(generate_image, dtype=tf.float32)
    generate_image = tf.reshape(generate_image, [batch, height, width , 1])
    return generate_image

test = Load_model(mask_g_model, face_g_model, mask_checkpoint_dir=mask_checkpoint_dir, face_checkpoint_dir=face_checkpoint_dir)
test.load()
test.one_predict("/content/drive/MyDrive/SJSU assignment Docs/Spring 22/Face Mask project/Dataset/Test_masked/1011_N95.jpg")